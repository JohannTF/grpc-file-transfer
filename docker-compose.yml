# docker-compose.yml
version: '3.8'

services:
  # Servidor RPC
  server:
    build:
      context: .
      dockerfile: Dockerfile.server
    ports:
      - "50051:50051"
    networks:
      - rcp-network
    volumes:
      - ./data:/app/data:ro  # Montar directorio data como read-only
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.settimeout(1); result=s.connect_ex(('localhost',50051)); s.close(); exit(result)"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 30s
    container_name: rcp-server

  # Cliente 1
  client1:
    build:
      context: .
      dockerfile: Dockerfile.client
    depends_on:
      server:
        condition: service_healthy
    networks:
      - rcp-network
    command: ["sh", "-c", "python client.py --host server --client-id client_1 --output download_1.mp4 --concurrent 5 && echo 'Container will stay alive for inspection.' && sleep infinity"]
    container_name: rcp-client-1

  # Cliente 2
  client2:
    build:
      context: .
      dockerfile: Dockerfile.client
    depends_on:
      server:
        condition: service_healthy
    networks:
      - rcp-network
    command: ["sh", "-c", "python client.py --host server --client-id client_2 --output download_2.mp4 --concurrent 5 && echo 'Container will stay alive for inspection.' && sleep infinity"]
    container_name: rcp-client-2

  # Cliente 3
  client3:
    build:
      context: .
      dockerfile: Dockerfile.client
    depends_on:
      server:
        condition: service_healthy
    networks:
      - rcp-network
    command: ["sh", "-c", "python client.py --host server --client-id client_3 --output download_3.mp4 --concurrent 5 && echo 'Container will stay alive for inspection.' && sleep infinity"]
    container_name: rcp-client-3

  # Cliente 4
  client4:
    build:
      context: .
      dockerfile: Dockerfile.client
    depends_on:
      server:
        condition: service_healthy
    networks:
      - rcp-network
    command: ["sh", "-c", "python client.py --host server --client-id client_4 --output download_4.mp4 --concurrent 5 && echo 'Container will stay alive for inspection.' && sleep infinity"]
    container_name: rcp-client-4

  # Cliente 5
  client5:
    build:
      context: .
      dockerfile: Dockerfile.client
    depends_on:
      server:
        condition: service_healthy
    networks:
      - rcp-network
    command: ["sh", "-c", "python client.py --host server --client-id client_5 --output download_5.mp4 --concurrent 5 && echo 'Container will stay alive for inspection.' && sleep infinity"]
    container_name: rcp-client-5

networks:
  rcp-network:
    driver: bridge
